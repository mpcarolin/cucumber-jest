"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@babel/core");

var _babelPresetJest = _interopRequireDefault(require("babel-preset-jest"));

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  canInstrument: false,
  getCacheKey: (fileData, filename, configString, {
    instrument
  }) => _crypto.default.createHash('md5').update('\0', 'utf8').update(fileData).update('\0', 'utf8').update(filename).update('\0', 'utf8').update(configString).update('\0', 'utf8').update('\0', 'utf8').update(instrument ? 'instrument' : '').digest('hex'),

  process(src, filePath, jestConfig) {
    const extensions = JSON.stringify(jestConfig.moduleFileExtensions);
    const restoreMocks = (!!jestConfig.restoreMocks).toString();
    const keepMocks = JSON.stringify(process.env.KEEP_MOCKS ? JSON.parse(process.env.KEEP_MOCKS) : []);
    const testFile = `
            import execTest from 'cucumber-jest/dist/utils/parseFeature';
            
            execTest('${jestConfig.cwd}', '${filePath}', ${extensions}, ${restoreMocks}, ${keepMocks})
        `;
    const featureFile = (0, _core.transform)(testFile, {
      filename: filePath,
      presets: [_babelPresetJest.default],
      root: jestConfig.cwd
    });
    return featureFile ? featureFile.code : src;
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJjYW5JbnN0cnVtZW50IiwiZ2V0Q2FjaGVLZXkiLCJmaWxlRGF0YSIsImZpbGVuYW1lIiwiY29uZmlnU3RyaW5nIiwiaW5zdHJ1bWVudCIsImNyeXB0byIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJwcm9jZXNzIiwic3JjIiwiZmlsZVBhdGgiLCJqZXN0Q29uZmlnIiwiZXh0ZW5zaW9ucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGVGaWxlRXh0ZW5zaW9ucyIsInJlc3RvcmVNb2NrcyIsInRvU3RyaW5nIiwia2VlcE1vY2tzIiwiZW52IiwiS0VFUF9NT0NLUyIsInBhcnNlIiwidGVzdEZpbGUiLCJjd2QiLCJmZWF0dXJlRmlsZSIsInByZXNldHMiLCJqZXN0UHJlc2V0Iiwicm9vdCIsImNvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztlQUdlO0FBQ1hBLEVBQUFBLGFBQWEsRUFBRSxLQURKO0FBRVhDLEVBQUFBLFdBQVcsRUFBRSxDQUFDQyxRQUFELEVBQVdDLFFBQVgsRUFBcUJDLFlBQXJCLEVBQW1DO0FBQUNDLElBQUFBO0FBQUQsR0FBbkMsS0FDVEMsZ0JBQ0tDLFVBREwsQ0FDZ0IsS0FEaEIsRUFFS0MsTUFGTCxDQUVZLElBRlosRUFFa0IsTUFGbEIsRUFHS0EsTUFITCxDQUdZTixRQUhaLEVBSUtNLE1BSkwsQ0FJWSxJQUpaLEVBSWtCLE1BSmxCLEVBS0tBLE1BTEwsQ0FLWUwsUUFMWixFQU1LSyxNQU5MLENBTVksSUFOWixFQU1rQixNQU5sQixFQU9LQSxNQVBMLENBT1lKLFlBUFosRUFRS0ksTUFSTCxDQVFZLElBUlosRUFRa0IsTUFSbEIsRUFTS0EsTUFUTCxDQVNZLElBVFosRUFTa0IsTUFUbEIsRUFVS0EsTUFWTCxDQVVZSCxVQUFVLEdBQUcsWUFBSCxHQUFrQixFQVZ4QyxFQVdLSSxNQVhMLENBV1ksS0FYWixDQUhPOztBQWdCWEMsRUFBQUEsT0FBTyxDQUFDQyxHQUFELEVBQWNDLFFBQWQsRUFBcUNDLFVBQXJDLEVBQXVFO0FBRTFFLFVBQU1DLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVILFVBQVUsQ0FBQ0ksb0JBQTFCLENBQW5CO0FBRUEsVUFBTUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDTCxVQUFVLENBQUNLLFlBQWQsRUFBNEJDLFFBQTVCLEVBQXJCO0FBRUEsVUFBTUMsU0FBUyxHQUFHTCxJQUFJLENBQUNDLFNBQUwsQ0FDZE4sT0FBTyxDQUFDVyxHQUFSLENBQVlDLFVBQVosR0FDSVAsSUFBSSxDQUFDUSxLQUFMLENBQVdiLE9BQU8sQ0FBQ1csR0FBUixDQUFZQyxVQUF2QixDQURKLEdBRUksRUFIVSxDQUFsQjtBQU1BLFVBQU1FLFFBQVEsR0FBSTtBQUMxQjtBQUNBO0FBQ0Esd0JBQXdCWCxVQUFVLENBQUNZLEdBQUksT0FBTWIsUUFBUyxNQUFLRSxVQUFXLEtBQUlJLFlBQWEsS0FBSUUsU0FBVTtBQUNyRyxTQUpRO0FBTUEsVUFBTU0sV0FBVyxHQUFHLHFCQUFVRixRQUFWLEVBQW9CO0FBQ3BDckIsTUFBQUEsUUFBUSxFQUFFUyxRQUQwQjtBQUVwQ2UsTUFBQUEsT0FBTyxFQUFFLENBQUNDLHdCQUFELENBRjJCO0FBR3BDQyxNQUFBQSxJQUFJLEVBQUVoQixVQUFVLENBQUNZO0FBSG1CLEtBQXBCLENBQXBCO0FBTUEsV0FBT0MsV0FBVyxHQUFHQSxXQUFXLENBQUNJLElBQWYsR0FBc0JuQixHQUF4QztBQUNIOztBQXpDVSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJhbnNmb3JtIH0gZnJvbSAnQGJhYmVsL2NvcmUnO1xuaW1wb3J0IGplc3RQcmVzZXQgZnJvbSAnYmFiZWwtcHJlc2V0LWplc3QnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHR5cGUgeyBDb25maWcgfSBmcm9tICdAamVzdC90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjYW5JbnN0cnVtZW50OiBmYWxzZSxcbiAgICBnZXRDYWNoZUtleTogKGZpbGVEYXRhLCBmaWxlbmFtZSwgY29uZmlnU3RyaW5nLCB7aW5zdHJ1bWVudH0pID0+IChcbiAgICAgICAgY3J5cHRvXG4gICAgICAgICAgICAuY3JlYXRlSGFzaCgnbWQ1JylcbiAgICAgICAgICAgIC51cGRhdGUoJ1xcMCcsICd1dGY4JylcbiAgICAgICAgICAgIC51cGRhdGUoZmlsZURhdGEpXG4gICAgICAgICAgICAudXBkYXRlKCdcXDAnLCAndXRmOCcpXG4gICAgICAgICAgICAudXBkYXRlKGZpbGVuYW1lKVxuICAgICAgICAgICAgLnVwZGF0ZSgnXFwwJywgJ3V0ZjgnKVxuICAgICAgICAgICAgLnVwZGF0ZShjb25maWdTdHJpbmcpXG4gICAgICAgICAgICAudXBkYXRlKCdcXDAnLCAndXRmOCcpXG4gICAgICAgICAgICAudXBkYXRlKCdcXDAnLCAndXRmOCcpXG4gICAgICAgICAgICAudXBkYXRlKGluc3RydW1lbnQgPyAnaW5zdHJ1bWVudCcgOiAnJylcbiAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpXG4gICAgKSxcbiAgICBwcm9jZXNzKHNyYzogc3RyaW5nLCBmaWxlUGF0aDogQ29uZmlnLlBhdGgsIGplc3RDb25maWc6IENvbmZpZy5Qcm9qZWN0Q29uZmlnKSB7XG5cbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IEpTT04uc3RyaW5naWZ5KGplc3RDb25maWcubW9kdWxlRmlsZUV4dGVuc2lvbnMpO1xuXG4gICAgICAgIGNvbnN0IHJlc3RvcmVNb2NrcyA9ICghIWplc3RDb25maWcucmVzdG9yZU1vY2tzKS50b1N0cmluZygpO1xuXG4gICAgICAgIGNvbnN0IGtlZXBNb2NrcyA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuS0VFUF9NT0NLUyA/XG4gICAgICAgICAgICAgICAgSlNPTi5wYXJzZShwcm9jZXNzLmVudi5LRUVQX01PQ0tTKSA6XG4gICAgICAgICAgICAgICAgW11cbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCB0ZXN0RmlsZSA9IGBcbiAgICAgICAgICAgIGltcG9ydCBleGVjVGVzdCBmcm9tICdjdWN1bWJlci1qZXN0L2Rpc3QvdXRpbHMvcGFyc2VGZWF0dXJlJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhlY1Rlc3QoJyR7amVzdENvbmZpZy5jd2R9JywgJyR7ZmlsZVBhdGh9JywgJHtleHRlbnNpb25zfSwgJHtyZXN0b3JlTW9ja3N9LCAke2tlZXBNb2Nrc30pXG4gICAgICAgIGA7XG5cbiAgICAgICAgY29uc3QgZmVhdHVyZUZpbGUgPSB0cmFuc2Zvcm0odGVzdEZpbGUsIHtcbiAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlUGF0aCxcbiAgICAgICAgICAgIHByZXNldHM6IFtqZXN0UHJlc2V0XSxcbiAgICAgICAgICAgIHJvb3Q6IGplc3RDb25maWcuY3dkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmZWF0dXJlRmlsZSA/IGZlYXR1cmVGaWxlLmNvZGUgOiBzcmM7XG4gICAgfVxufTtcbiJdfQ==